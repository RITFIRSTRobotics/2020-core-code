#!/bin/bash
# 2020-core-code configuration file
#
# This file will automatically generates a makefile that runs all the sub-makefiles
#
# @author Connor Henley, @thatging3rkid 

# run an apt-get update if this is automated
if test -e "config.onpush" || test -e "config.full"; then
    if ! [[ -z "${CI}" ]]; then
        sudo apt-get update -qq
    fi
fi

# install valgrind
if ! [ -x "$(command -v valgrind)" ]; then
    if ! [[ -z "${CI}" ]]; then
        sudo apt-get install -y valgrind
    else
        printf "[*err] valgrind not installed\n"
    fi
fi

# install pdflatex (only for full builds)
if ! [ -x "$(command -v pdflatex)" ] && test -e "config.full"; then
    if ! [[ -z "$CI" ]]; then
        # Install MiKTeX
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 \
            --recv-keys D6BC243565B2087BC3F897C9277A7293F59E4889 > /dev/null
        echo "deb https://mirrors.rit.edu/CTAN/systems/win32/miktex/setup/deb `lsb_release -c -s` universe" | \
            sudo tee /etc/apt/sources.list.d/miktex.list > /dev/null
        sudo apt-get update -qq && sudo apt-get install -y miktex

        # check for error
        if ! [ $? == 0 ]; then
            exit 1;
        fi

        # Setup MiKTeX and enable auto-package installation
        sudo miktexsetup --shared=yes finish && sudo initexmf --admin --set-config-value [MPM]AutoInstall=1
        sudo mpm --admin --set-repository=http://mirrors.rit.edu/CTAN/systems/win32/miktex/tm/packages/
        sudo mpm --admin --update-db # update database, should fix auto-package installation
    else
        printf "[warn] MiKTeX not installed\n"
    fi
fi

# make sure lib directory exists
if ! test -d "lib"; then
    mkdir lib
fi

# Define the make mode
if test -e "config.onpush"; then
    make_mode="onpush"
elif test -e "config.full"; then
    make_mode="full"
else
    make_mode="dev"
fi

# debugging: log the make mode
printf '[info] make_mode=%s\n' ${make_mode}

# Start the makefile, put the header down
printf "" >Makefile
printf '# %s makefile\n' "${PWD##*/}" >>Makefile

# Print some debugging info into the file
printf '# configuration: %s' ${make_mode} >>Makefile
printf '# Generated on: %s at %s\n' "$HOSTNAME" "`date`" >>Makefile

# Mark directories to ignore
skips=("./.git/" "./.github/" "./obj/" "./tmp/")
if ! test -e "config.full"; then
    skips+=("./doc/")
fi

# Searh for Makefiles
dirs=()
for dir in ./*/
do
    # check if this should be skipped
    if [[ " ${skips[@]} " =~ " ${dir} " ]]; then
        continue
    fi

    # if there's a makefile, save it
    if test -f "${dir}/Makefile"; then
		dirs+=(${dir})
    fi
done

# Define the git hash
git_hash=`git describe --always`
if ! [[ $git_hash =~ [0-9a-f]{7} ]]; then
    git_hash="fffffff"
fi
git_hash="GIT_HASH="${git_hash}

# Build the parameter to pass to other makefiles
make_mode_param="MAKE_MODE=${make_mode^^}"

# define a function to generate each line of the makefile
#
# @param $1 the make command to run
# @param $2 the file/directory to generate a make entry for
gen_makefile_line(){
    if test -f ${1}; then
        printf '\t-make %s %s -f %s %s\n' ${make_mode_param} ${git_hash} ${1} ${2} >>Makefile
    else
        printf '\t-make %s %s -C %s %s\n' ${make_mode_param} ${git_hash} ${1} ${2} >>Makefile
    fi
}

# Add the build-all instruction, ensuring that we clean before a build as cleaning will remove the obj dir
printf '\nall:\n' >>Makefile

# run a clean before a on-push or full build, as this will remove the obj dir
if [[ "${make_mode}" != "dev" ]]; then
    for s in "${dirs[@]}"
    do
        gen_makefile_line ${s} "clean";
    done
fi

for s in "${dirs[@]}"
do
    gen_makefile_line ${s} "ci-build";
done
printf '\t@echo "Finished running ci-build for all"\n' >>Makefile

# Add the test instruction
printf '\ncheck:\n' >>Makefile
for s in "${dirs[@]}"
do
    gen_makefile_line ${s} "ci-test";
done
printf '\t@echo "Finished running ci-test for all"\n' >>Makefile

# Add the clean instruction
printf '\nclean:\n' >>Makefile
# We need to clean everything before we make anything, or the clean instructions will wipe all the previous obj files
for s in "${dirs[@]}"
do
    gen_makefile_line ${s} "clean";
done
printf '\t@echo "Finished running clean for all"\n' >>Makefile

# Supply the required recipes (just in case another makefile is above this one)
printf '\n# Required recipes\nci-build: all\nci-test: check\n' >>Makefile

echo "Complete!"
